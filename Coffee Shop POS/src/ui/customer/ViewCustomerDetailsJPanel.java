/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.customer;

import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Business;
import model.Order;

/**
 *
 * @author grace
 */
public class ViewCustomerDetailsJPanel extends javax.swing.JPanel {
    private JPanel mainWorkArea;
    private Business business;
    private Order selectedOrder;
    /**
     * Creates new form ViewCustomerDetailsJPanel
     */
    public ViewCustomerDetailsJPanel(JPanel mainWorkArea, Business business) {
        initComponents();
        
        this.mainWorkArea = mainWorkArea;
        this.business = business;
        
        populateComboBoxes(); 
        addTableSelectionListener();
        refreshTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSave = new javax.swing.JButton();
        btnUpdateOrder = new javax.swing.JButton();
        btnCancelOrder = new javax.swing.JButton();
        lblOrderID = new javax.swing.JLabel();
        lblOrderType = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblProduct = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtOrderID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtSearchOrderID = new javax.swing.JTextField();
        txtSearchItem = new javax.swing.JTextField();
        btnSearchID = new javax.swing.JButton();
        btnSearchName = new javax.swing.JButton();
        cmbProduct = new javax.swing.JComboBox<>();
        cmbOrderType = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(153, 153, 153));

        btnSave.setBackground(new java.awt.Color(0, 153, 153));
        btnSave.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdateOrder.setBackground(new java.awt.Color(0, 153, 153));
        btnUpdateOrder.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        btnUpdateOrder.setText("Update Order");
        btnUpdateOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateOrderActionPerformed(evt);
            }
        });

        btnCancelOrder.setBackground(new java.awt.Color(0, 153, 153));
        btnCancelOrder.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        btnCancelOrder.setText("Cancel Order");
        btnCancelOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelOrderActionPerformed(evt);
            }
        });

        lblOrderID.setText("Order ID");

        lblOrderType.setText("Order Type");

        jLabel1.setText("Search by Order ID");

        lblProduct.setText("Product");

        jLabel2.setText("Search by Item");

        txtOrderID.setEditable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Order Type", "Product", "Total Price", "Order Date/Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        txtSearchOrderID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchOrderIDActionPerformed(evt);
            }
        });

        txtSearchItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchItemActionPerformed(evt);
            }
        });

        btnSearchID.setBackground(new java.awt.Color(0, 153, 153));
        btnSearchID.setText("Search");
        btnSearchID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchIDActionPerformed(evt);
            }
        });

        btnSearchName.setBackground(new java.awt.Color(0, 153, 153));
        btnSearchName.setText("Search");
        btnSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchNameActionPerformed(evt);
            }
        });

        cmbProduct.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbOrderType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblProduct)
                            .addComponent(lblOrderType)
                            .addComponent(lblOrderID))
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbOrderType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(22, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSearchOrderID, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                    .addComponent(txtSearchItem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearchID)
                    .addComponent(btnSearchName))
                .addGap(43, 43, 43))
            .addGroup(layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addComponent(btnUpdateOrder)
                .addGap(27, 27, 27)
                .addComponent(btnCancelOrder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addGap(71, 71, 71))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtSearchOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchID))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtSearchItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearchName)))
                .addGap(55, 55, 55)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOrderID))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(lblOrderType))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbOrderType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblProduct)
                    .addComponent(cmbProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateOrder)
                    .addComponent(btnCancelOrder)
                    .addComponent(btnSave))
                .addContainerGap(75, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelOrderActionPerformed
        // TODO add your handling code here:
        if (selectedOrder == null) {
            JOptionPane.showMessageDialog(this, "Please select an order from the table", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to cancel this order?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            business.getOrderDirectory().removeOrder(selectedOrder);
            JOptionPane.showMessageDialog(this, "Order cancelled successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            clearFields();
            refreshTable();
        }
    }//GEN-LAST:event_btnCancelOrderActionPerformed

    private void txtSearchOrderIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchOrderIDActionPerformed
        // TODO add your handling code here:
        searchByOrderId();
    }
    private void searchByOrderId() {
        String orderIdText = txtSearchOrderID.getText().trim();
        if (orderIdText.isEmpty()) {
            refreshTable();
            return;
        }
        
        try {
            int orderId = Integer.parseInt(orderIdText);
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            
            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm");
            
            for (Order order : business.getOrderDirectory().getOrderList()) {
                if (order.getOrderId() == orderId) {
                    Object[] row = new Object[5];
                    row[0] = order.getOrderId();
                    row[1] = order.getOrderType();
                    row[2] = order.getProduct().getProductName();
                    row[3] = "$" + order.getTotalPrice();
                    row[4] = sdf.format(order.getOrderDateTime());
                    model.addRow(row);
                    return;
                }
            }
            JOptionPane.showMessageDialog(this, "Order not found", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid Order ID", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtSearchOrderIDActionPerformed

    private void txtSearchItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchItemActionPerformed
        // TODO add your handling code here:
          searchByItem();
    }//GEN-LAST:event_txtSearchItemActionPerformed

    private void btnUpdateOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateOrderActionPerformed
        // TODO add your handling code here:
        if (selectedOrder == null) {
        JOptionPane.showMessageDialog(this, "Please select an order from the table", "Error", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    // Update the order
    selectedOrder.setOrderType((String) cmbOrderType.getSelectedItem());
    
    // Find and set the new product
    String selectedProductName = (String) cmbProduct.getSelectedItem();
    for (model.Product product : business.getProductCatalog().getProductList()) {
        if (product.getProductName().equals(selectedProductName)) {
            selectedOrder.setProduct(product);
            break;
        }
    }
    
    JOptionPane.showMessageDialog(this, "Order updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
    refreshTable();
    }//GEN-LAST:event_btnUpdateOrderActionPerformed

    private void btnSearchIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchIDActionPerformed
        // TODO add your handling code here:
            searchByOrderId();
    }//GEN-LAST:event_btnSearchIDActionPerformed

    private void btnSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchNameActionPerformed
        // TODO add your handling code here:
            searchByOrderId();
    }//GEN-LAST:event_btnSearchNameActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        mainWorkArea.remove(this);
    CardLayout layout = (CardLayout) mainWorkArea.getLayout();
    layout.previous(mainWorkArea);
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelOrder;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearchID;
    private javax.swing.JButton btnSearchName;
    private javax.swing.JButton btnUpdateOrder;
    private javax.swing.JComboBox<String> cmbOrderType;
    private javax.swing.JComboBox<String> cmbProduct;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblOrderID;
    private javax.swing.JLabel lblOrderType;
    private javax.swing.JLabel lblProduct;
    private javax.swing.JTextField txtOrderID;
    private javax.swing.JTextField txtSearchItem;
    private javax.swing.JTextField txtSearchOrderID;
    // End of variables declaration//GEN-END:variables

    private void refreshTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm");
        
        for (Order order : business.getOrderDirectory().getOrderList()) {
            Object[] row = new Object[5];
            row[0] = order.getOrderId();
            row[1] = order.getOrderType();
            row[2] = order.getProduct().getProductName();
            row[3] = "$" + order.getTotalPrice();
            row[4] = sdf.format(order.getOrderDateTime());
            model.addRow(row);
        }    }

    private void addTableSelectionListener() {
 jTable1.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && jTable1.getSelectedRow() != -1) {
                int selectedRow = jTable1.getSelectedRow();
                int orderId = (int) jTable1.getValueAt(selectedRow, 0);
                
                for (Order order : business.getOrderDirectory().getOrderList()) {
                    if (order.getOrderId() == orderId) {
                        displayOrderDetails(order);
                        break;
                    }
                }
            }
        });
    }

    private void displayOrderDetails(Order order) {
        selectedOrder = order;
    txtOrderID.setText(String.valueOf(order.getOrderId()));
    cmbOrderType.setSelectedItem(order.getOrderType());
    cmbProduct.setSelectedItem(order.getProduct().getProductName());
    
    txtOrderID.setEditable(false);
    }

    private void clearFields() {
        txtOrderID.setText("");
    cmbOrderType.setSelectedIndex(0);
    cmbProduct.setSelectedIndex(0);
    txtSearchOrderID.setText("");
    txtSearchItem.setText("");
    selectedOrder = null;
    }   

    private void searchByItem() {
         String itemName = txtSearchItem.getText().trim();
        if (itemName.isEmpty()) {
            refreshTable();
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm");
        boolean found = false;
        
        for (Order order : business.getOrderDirectory().getOrderList()) {
            if (order.getProduct().getProductName().toLowerCase().contains(itemName.toLowerCase())) {
                Object[] row = new Object[5];
                row[0] = order.getOrderId();
                row[1] = order.getOrderType();
                row[2] = order.getProduct().getProductName();
                row[3] = "$" + order.getTotalPrice();
                row[4] = sdf.format(order.getOrderDateTime());
                model.addRow(row);
                found = true;
            }
        }
        
        if (!found) {
            JOptionPane.showMessageDialog(this, "No orders found with that item", "Error", JOptionPane.ERROR_MESSAGE);
            refreshTable();
        }    }

    private void populateComboBoxes() {
  cmbOrderType.removeAllItems();
    cmbOrderType.addItem("Dine-in");
    cmbOrderType.addItem("Takeout");
    cmbOrderType.addItem("Pickup");
    
    // Populate Products
    cmbProduct.removeAllItems();
    for (model.Product product : business.getProductCatalog().getProductList()) {
        cmbProduct.addItem(product.getProductName());
    }
    }
}
