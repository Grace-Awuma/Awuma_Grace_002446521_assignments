/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.manager;

import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.Business;
import model.Customer;
import model.Order;
import model.Product;

/**
 *
 * @author grace
 */
public class AddCustomerOrderJPanel extends javax.swing.JPanel {
    private JPanel mainWorkArea;
    private Business business;
    /**
     * Creates new form AddCustomerOrderJPanel
     */
    public AddCustomerOrderJPanel(JPanel mainWorkArea, Business business) {
        initComponents();
        
        this.mainWorkArea = mainWorkArea;
        this.business = business;
        
        populateComboBoxes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtQuantity = new javax.swing.JTextField();
        lblCustomerID = new javax.swing.JLabel();
        btnAddCustomerandOrder = new javax.swing.JButton();
        lblLastName = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        lblOrderID = new javax.swing.JLabel();
        cmbOrderType = new javax.swing.JComboBox<>();
        lblFirstName = new javax.swing.JLabel();
        lblContact = new javax.swing.JLabel();
        lblOrderDateandTime = new javax.swing.JLabel();
        cmbOrderStatus = new javax.swing.JComboBox<>();
        lblOrderType = new javax.swing.JLabel();
        cmbProductOpted = new javax.swing.JComboBox<>();
        lblOrderStatus = new javax.swing.JLabel();
        lblPaymentMethod = new javax.swing.JLabel();
        lblProductOpted = new javax.swing.JLabel();
        lblQuantity = new javax.swing.JLabel();
        cmbPaymentMethod = new javax.swing.JComboBox<>();
        lblPaid = new javax.swing.JLabel();
        chkPaid = new javax.swing.JCheckBox();
        txtCustomerID = new javax.swing.JTextField();
        txtFirstName = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        txtContact = new javax.swing.JTextField();
        txtOrderID = new javax.swing.JTextField();
        lblAddCustomerandOrder = new javax.swing.JLabel();

        lblCustomerID.setText("Customer ID");

        btnAddCustomerandOrder.setText("Add Customer + Order");
        btnAddCustomerandOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCustomerandOrderActionPerformed(evt);
            }
        });

        lblLastName.setText("Last Name");

        btnReset.setText("Reset");

        lblOrderID.setText("Order ID");

        cmbOrderType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblFirstName.setText("First Name");

        lblContact.setText("Contact");

        lblOrderDateandTime.setText("Order Date and Time");

        cmbOrderStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblOrderType.setText("Order Type");

        cmbProductOpted.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblOrderStatus.setText("Order Status");

        lblPaymentMethod.setText("Payment Method");

        lblProductOpted.setText("Product Opted");

        lblQuantity.setText("Number/Quantity");

        cmbPaymentMethod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblPaid.setText("Paid?");

        chkPaid.setText("Paid");
        chkPaid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPaidActionPerformed(evt);
            }
        });

        txtCustomerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustomerIDActionPerformed(evt);
            }
        });

        txtContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtContactActionPerformed(evt);
            }
        });

        lblAddCustomerandOrder.setBackground(new java.awt.Color(255, 255, 255));
        lblAddCustomerandOrder.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        lblAddCustomerandOrder.setText("Add Customer and Order");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOrderID)
                            .addComponent(lblOrderDateandTime)
                            .addComponent(lblOrderType)
                            .addComponent(lblPaymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtOrderID)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbOrderType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbPaymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblContact)
                        .addGap(95, 95, 95)
                        .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCustomerID)
                            .addComponent(lblFirstName)
                            .addComponent(lblLastName))
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtLastName)
                            .addComponent(txtCustomerID)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPaid)
                            .addComponent(lblQuantity)
                            .addComponent(lblProductOpted)
                            .addComponent(lblOrderStatus))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtQuantity)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkPaid)
                                    .addComponent(cmbProductOpted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbOrderStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(btnAddCustomerandOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(btnReset))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(lblAddCustomerandOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(161, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(lblAddCustomerandOrder)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustomerID)
                    .addComponent(txtCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstName)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLastName)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblContact)
                    .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrderID)
                    .addComponent(txtOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblOrderDateandTime)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrderType)
                    .addComponent(cmbOrderType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPaymentMethod)
                    .addComponent(cmbPaymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrderStatus)
                    .addComponent(cmbOrderStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProductOpted)
                    .addComponent(cmbProductOpted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQuantity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPaid)
                    .addComponent(chkPaid))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddCustomerandOrder)
                    .addComponent(btnReset))
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddCustomerandOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCustomerandOrderActionPerformed
        // TODO add your handling code here:
         if (txtCustomerID.getText().trim().isEmpty() || 
            txtFirstName.getText().trim().isEmpty() || 
            txtLastName.getText().trim().isEmpty() || 
            txtContact.getText().trim().isEmpty() ||
            txtOrderID.getText().trim().isEmpty() ||
            txtQuantity.getText().trim().isEmpty()) {
            
            JOptionPane.showMessageDialog(this, "All fields are required", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            int customerId = Integer.parseInt(txtCustomerID.getText().trim());
            int orderId = Integer.parseInt(txtOrderID.getText().trim());
            int quantity = Integer.parseInt(txtQuantity.getText().trim());
            
            if (quantity <= 0) {
                JOptionPane.showMessageDialog(this, "Quantity must be positive", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (cmbProductOpted.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(this, "Please select a product", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            Customer customer = business.getOrderDirectory().addCustomer(
                customerId,
                txtFirstName.getText().trim(),
                txtLastName.getText().trim(),
                txtContact.getText().trim()
            );
            
            Product selectedProduct = (Product) cmbProductOpted.getSelectedItem();
            
            Order order = business.getOrderDirectory().addOrder(
                orderId,
                new Date(),
                (String) cmbOrderType.getSelectedItem(),
                (String) cmbPaymentMethod.getSelectedItem(),
                (String) cmbOrderStatus.getSelectedItem(),
                selectedProduct,
                customer,
                quantity
            );
            
            JOptionPane.showMessageDialog(this, "Customer and Order added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            resetForm();
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Customer ID, Order ID and Quantity must be valid numbers", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddCustomerandOrderActionPerformed

    private void chkPaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPaidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkPaidActionPerformed

    private void txtCustomerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustomerIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCustomerIDActionPerformed

    private void txtContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtContactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtContactActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCustomerandOrder;
    private javax.swing.JButton btnReset;
    private javax.swing.JCheckBox chkPaid;
    private javax.swing.JComboBox<String> cmbOrderStatus;
    private javax.swing.JComboBox<String> cmbOrderType;
    private javax.swing.JComboBox<String> cmbPaymentMethod;
    private javax.swing.JComboBox<Object> cmbProductOpted;
    private javax.swing.JLabel lblAddCustomerandOrder;
    private javax.swing.JLabel lblContact;
    private javax.swing.JLabel lblCustomerID;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblOrderDateandTime;
    private javax.swing.JLabel lblOrderID;
    private javax.swing.JLabel lblOrderStatus;
    private javax.swing.JLabel lblOrderType;
    private javax.swing.JLabel lblPaid;
    private javax.swing.JLabel lblPaymentMethod;
    private javax.swing.JLabel lblProductOpted;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtCustomerID;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtOrderID;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables

    private void populateComboBoxes() {
  cmbOrderType.removeAllItems();
        cmbOrderType.addItem("Dine-in");
        cmbOrderType.addItem("Takeout");
        cmbOrderType.addItem("Pickup");
        
        cmbPaymentMethod.removeAllItems();
        cmbPaymentMethod.addItem("Cash");
        cmbPaymentMethod.addItem("Card");
        cmbPaymentMethod.addItem("Mobile");
        
        cmbOrderStatus.removeAllItems();
        cmbOrderStatus.addItem("Pending");
        cmbOrderStatus.addItem("Preparing");
        cmbOrderStatus.addItem("Ready");
        cmbOrderStatus.addItem("Completed");
        
        cmbProductOpted.removeAllItems();
        for (Product product : business.getProductCatalog().getProductList()) {
            cmbProductOpted.addItem(product); 
        }
    }

    private void resetForm() {
txtCustomerID.setText("");
        txtFirstName.setText("");
        txtLastName.setText("");
        txtContact.setText("");
        txtOrderID.setText("");
        txtQuantity.setText("");
        chkPaid.setSelected(false);
        
        if (cmbOrderType.getItemCount() > 0) cmbOrderType.setSelectedIndex(0);
        if (cmbPaymentMethod.getItemCount() > 0) cmbPaymentMethod.setSelectedIndex(0);
        if (cmbOrderStatus.getItemCount() > 0) cmbOrderStatus.setSelectedIndex(0);
        if (cmbProductOpted.getItemCount() > 0) cmbProductOpted.setSelectedIndex(0);
        }
}
