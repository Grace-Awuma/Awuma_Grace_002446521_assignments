/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.manager;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Business;
import model.Customer;
import model.Order;

/**
 *
 * @author grace
 */
public class SearchCustomerJPanel extends javax.swing.JPanel {
    private JPanel mainWorkArea;
    private Business business;
    private Customer selectedCustomer;
    private Order selectedOrder;
    /**
     * Creates new form SearchCustomerJPanel
     */
    public SearchCustomerJPanel(JPanel mainWorkArea, Business business) {
        initComponents();
         this.mainWorkArea = mainWorkArea;
        this.business = business;
        
        populateStatusComboBox();
        addTableSelectionListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnViewOrder = new javax.swing.JButton();
        btnUpdateStatus = new javax.swing.JButton();
        btnSearchName = new javax.swing.JButton();
        txtLastName = new javax.swing.JTextField();
        lblSetStatus = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtContact = new javax.swing.JTextField();
        cmbStatus = new javax.swing.JComboBox<>();
        btnUpdateCustomer = new javax.swing.JButton();
        btnDeleteCustomer = new javax.swing.JButton();
        lblCustomerID = new javax.swing.JLabel();
        lblCustomerHistory = new javax.swing.JLabel();
        lblFirstName = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblContact = new javax.swing.JLabel();
        lblSearchCustomerID = new javax.swing.JTextField();
        txtCustomerID = new javax.swing.JTextField();
        btnDeleteOrder = new javax.swing.JButton();
        txtSearchName = new javax.swing.JTextField();
        txtFirstName = new javax.swing.JTextField();
        btnSearchID = new javax.swing.JButton();

        btnViewOrder.setText("View Order");
        btnViewOrder.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnViewOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrderActionPerformed(evt);
            }
        });

        btnUpdateStatus.setText("Update Status");
        btnUpdateStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateStatusActionPerformed(evt);
            }
        });

        btnSearchName.setText("Search Name");
        btnSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchNameActionPerformed(evt);
            }
        });

        lblSetStatus.setText("Set Status:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "First Name", "Last Name", "Contact"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnUpdateCustomer.setText("Update Customer");
        btnUpdateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCustomerActionPerformed(evt);
            }
        });

        btnDeleteCustomer.setText("DeleteCustomer");
        btnDeleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCustomerActionPerformed(evt);
            }
        });

        lblCustomerID.setText("Customer ID");

        lblCustomerHistory.setText("Customer History");

        lblFirstName.setText("First Name");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "DateTime", "Status", "Items", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jLabel1.setText("Search by Customer ID");

        lblLastName.setText("Last Name");

        jLabel2.setText("Search by Name");

        lblContact.setText("Contact");

        btnDeleteOrder.setText("Delete Order");
        btnDeleteOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteOrderActionPerformed(evt);
            }
        });

        txtSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchNameActionPerformed(evt);
            }
        });

        btnSearchID.setText("Search ID");
        btnSearchID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSearchCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSearchID)
                            .addComponent(btnSearchName))
                        .addGap(82, 82, 82))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21))))
            .addGroup(layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblContact)
                    .addComponent(lblLastName)
                    .addComponent(lblFirstName)
                    .addComponent(lblCustomerID))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdateCustomer)
                        .addGap(35, 35, 35)
                        .addComponent(btnDeleteCustomer)
                        .addGap(45, 45, 45))))
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(lblCustomerHistory)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lblSetStatus)
                .addGap(18, 18, 18)
                .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdateStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDeleteOrder)
                .addGap(29, 29, 29)
                .addComponent(btnViewOrder)
                .addGap(149, 149, 149))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblSearchCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchID))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchName))
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustomerID)
                    .addComponent(txtCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstName)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLastName)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblContact)
                    .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDeleteCustomer)
                    .addComponent(btnUpdateCustomer))
                .addGap(18, 18, 18)
                .addComponent(lblCustomerHistory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDeleteOrder)
                        .addComponent(btnViewOrder)
                        .addComponent(btnUpdateStatus))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblSetStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrderActionPerformed
        // TODO add your handling code here:
         if (selectedOrder == null) {
            JOptionPane.showMessageDialog(this, "Please select an order", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String orderDetails = "Order ID: " + selectedOrder.getOrderId() + "\n" +
                            "Product: " + selectedOrder.getProduct().getProductName() + "\n" +
                            "Quantity: " + selectedOrder.getQuantity() + "\n" +
                            "Total: $" + selectedOrder.getTotalPrice() + "\n" +
                            "Status: " + selectedOrder.getOrderStatus();
        
        JOptionPane.showMessageDialog(this, orderDetails, "Order Details", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnViewOrderActionPerformed

    private void btnSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchNameActionPerformed
        // TODO add your handling code here:
         String name = txtSearchName.getText().trim();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a name", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        ArrayList<Customer> foundCustomers = business.getOrderDirectory().searchCustomersByName(name);
        
        if (!foundCustomers.isEmpty()) {
            displaySearchResults(foundCustomers);
        } else {
            JOptionPane.showMessageDialog(this, "No customers found with that name", "Error", JOptionPane.ERROR_MESSAGE);
            clearCustomerTable();
        }
    }//GEN-LAST:event_btnSearchNameActionPerformed

    private void btnDeleteOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteOrderActionPerformed
        // TODO add your handling code here:
         if (selectedOrder == null) {
            JOptionPane.showMessageDialog(this, "Please select an order", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to delete this order?", 
            "Confirm Delete", 
            JOptionPane.YES_NO_OPTION);
            
        if (confirm == JOptionPane.YES_OPTION) {
            business.getOrderDirectory().removeOrder(selectedOrder);
            JOptionPane.showMessageDialog(this, "Order deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            selectedOrder = null;
            refreshOrderHistoryTable(selectedCustomer);
        }
    }//GEN-LAST:event_btnDeleteOrderActionPerformed

    private void txtSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchNameActionPerformed

    private void btnSearchIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchIDActionPerformed
        // TODO add your handling code here:
          String idText = lblSearchCustomerID.getText().trim();
        if (idText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Customer ID", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        try {
            int customerId = Integer.parseInt(idText);
            Customer customer = business.getOrderDirectory().searchCustomerById(customerId);
            
            if (customer != null) {
                displaySearchResults(customer);
            } else {
                JOptionPane.showMessageDialog(this, "Customer not found", "Error", JOptionPane.ERROR_MESSAGE);
                clearCustomerTable();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid Customer ID", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSearchIDActionPerformed

    private void btnUpdateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCustomerActionPerformed
        // TODO add your handling code here:
         if (selectedCustomer == null) {
            JOptionPane.showMessageDialog(this, "Please select a customer", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (txtFirstName.getText().trim().isEmpty() || 
            txtLastName.getText().trim().isEmpty() || 
            txtContact.getText().trim().isEmpty()) {
            
            JOptionPane.showMessageDialog(this, "All fields are required", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        selectedCustomer.setFirstName(txtFirstName.getText().trim());
        selectedCustomer.setLastName(txtLastName.getText().trim());
        selectedCustomer.setContact(txtContact.getText().trim());
        
        JOptionPane.showMessageDialog(this, "Customer updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        refreshCustomerTable();
    }//GEN-LAST:event_btnUpdateCustomerActionPerformed

    private void btnDeleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCustomerActionPerformed
        // TODO add your handling code here:
        if (selectedCustomer == null) {
            JOptionPane.showMessageDialog(this, "Please select a customer", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to delete this customer?", 
            "Confirm Delete", 
            JOptionPane.YES_NO_OPTION);
            
        if (confirm == JOptionPane.YES_OPTION) {
            business.getOrderDirectory().removeCustomer(selectedCustomer);
            JOptionPane.showMessageDialog(this, "Customer deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            clearFields();
            clearCustomerTable();
        }
    }//GEN-LAST:event_btnDeleteCustomerActionPerformed

    private void btnUpdateStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateStatusActionPerformed
        // TODO add your handling code here:
         if (selectedOrder == null) {
        JOptionPane.showMessageDialog(this, "Please select an order", "Error", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    String newStatus = (String) cmbStatus.getSelectedItem();
    selectedOrder.setOrderStatus(newStatus);
    JOptionPane.showMessageDialog(this, "Order status updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
    refreshOrderHistoryTable(selectedCustomer);
    }//GEN-LAST:event_btnUpdateStatusActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteCustomer;
    private javax.swing.JButton btnDeleteOrder;
    private javax.swing.JButton btnSearchID;
    private javax.swing.JButton btnSearchName;
    private javax.swing.JButton btnUpdateCustomer;
    private javax.swing.JButton btnUpdateStatus;
    private javax.swing.JButton btnViewOrder;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblContact;
    private javax.swing.JLabel lblCustomerHistory;
    private javax.swing.JLabel lblCustomerID;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JTextField lblSearchCustomerID;
    private javax.swing.JLabel lblSetStatus;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtCustomerID;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtSearchName;
    // End of variables declaration//GEN-END:variables

    private void populateStatusComboBox() {
        cmbStatus.removeAllItems();
        cmbStatus.addItem("Pending");
        cmbStatus.addItem("Preparing");
        cmbStatus.addItem("Ready");
        cmbStatus.addItem("Completed");    }

    private void addTableSelectionListeners() {
jTable1.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && jTable1.getSelectedRow() != -1) {
                int selectedRow = jTable1.getSelectedRow();
                int customerId = (int) jTable1.getValueAt(selectedRow, 0);
                
                selectedCustomer = business.getOrderDirectory().searchCustomerById(customerId);
                if (selectedCustomer != null) {
                    displayCustomerDetails(selectedCustomer);
                    refreshOrderHistoryTable(selectedCustomer);
                }
            }
        });
        
        jTable2.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && jTable2.getSelectedRow() != -1) {
                int selectedRow = jTable2.getSelectedRow();
                int orderId = (int) jTable2.getValueAt(selectedRow, 0);
                
                for (Order order : business.getOrderDirectory().getOrderList()) {
                    if (order.getOrderId() == orderId) {
                        selectedOrder = order;
                        break;
                    }
                }
            }
        });
    }

    private void displayCustomerDetails(Customer customer) {
    this.selectedCustomer = customer;
    txtCustomerID.setText(String.valueOf(customer.getCustomerId()));
    txtFirstName.setText(customer.getFirstName());
    txtLastName.setText(customer.getLastName());
    txtContact.setText(customer.getContact());
    txtCustomerID.setEditable(false);  
    }
    
    private void displaySearchResults(Customer customer) {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0);
    
    Object[] row = new Object[4];
    row[0] = customer.getCustomerId();
    row[1] = customer.getFirstName();
    row[2] = customer.getLastName();
    row[3] = customer.getContact();
    model.addRow(row);
    
    displayCustomerDetails(customer);
    refreshOrderHistoryTable(customer);
    
    }
    
    private void displaySearchResults(ArrayList<Customer> customers) {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0);
    
    for (Customer customer : customers) {
        Object[] row = new Object[4];
        row[0] = customer.getCustomerId();
        row[1] = customer.getFirstName();
        row[2] = customer.getLastName();
        row[3] = customer.getContact();
        model.addRow(row);
    }
}

    private void refreshOrderHistoryTable(Customer selectedCustomer) {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm");
        ArrayList<Order> customerOrders = business.getOrderDirectory().getOrdersByCustomer(selectedCustomer);
        
        for (Order order : customerOrders) {
            Object[] row = new Object[5];
            row[0] = order.getOrderId();
            row[1] = sdf.format(order.getOrderDateTime());
            row[2] = order.getOrderStatus();
            row[3] = order.getProduct().getProductName();
            row[4] = "$" + order.getTotalPrice();
            model.addRow(row);
        }   
    }

    private void clearFields() {
        lblSearchCustomerID.setText("");
        txtSearchName.setText("");
        txtCustomerID.setText("");
        txtFirstName.setText("");
        txtLastName.setText("");
        txtContact.setText("");
        selectedCustomer = null;
        selectedOrder = null;    }

    private void refreshCustomerTable() {
 if (selectedCustomer != null) {
            displaySearchResults(selectedCustomer);
        }
    }

    private void clearCustomerTable() {
DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        
        DefaultTableModel orderModel = (DefaultTableModel) jTable2.getModel();
        orderModel.setRowCount(0);    }

/**
 *
 * @author grace
 */

}